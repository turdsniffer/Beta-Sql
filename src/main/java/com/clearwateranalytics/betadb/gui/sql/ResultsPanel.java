/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultsPanel.java
 *
 * Created on Jun 21, 2011, 3:02:47 PM
 */

package com.clearwateranalytics.betadb.gui.sql;

import com.clearwateranalytics.betadb.gui.connection.ConnectionInfo;
import com.clearwateranalytics.betadb.gui.datasource.DataSourceSupplier;
import com.clearwateranalytics.betadb.gui.datasource.SQLUtils;
import com.clearwateranalytics.betadb.gui.dbobjects.DbInfo;
import com.clearwateranalytics.betadb.gui.table.util.ZebraTableRenderer;
import java.awt.Component;
import java.awt.Dimension;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 *
 * @author parmstrong
 */
public class ResultsPanel extends javax.swing.JPanel {

	DataSource ds;
	DbInfo dbInfo;
	PreparedStatement stmt;
	MessagePanel messagePanel;

	
    /** Creates new form ResultsPanel */
    public ResultsPanel( ConnectionInfo connectionInfo) {
        initComponents();
		ds = DataSourceSupplier.getInstance().getDataSourceByDbId(connectionInfo.getDataSourceKey());
		dbInfo = connectionInfo.getDbInfo();
		messagePanel = new MessagePanel();
		jSplitPane1.setBottomComponent(messagePanel);
		jSplitPane1.setResizeWeight(1);
		
    }

	public void getResults(String sql)
	{			
		sql = "USE "+dbInfo.getDbName()+" \nGO\n "+sql;
		
		
		messagePanel.setMessage("Running query...");
		pnlResults.removeAll();
		QueryExecutor queryExecutor = new QueryExecutor(sql);
		queryExecutor.execute();			
	}
	
	private Component getResultsTable(ResultSet rs) throws SQLException
	{
		String[] columnNames = getColumnNames(rs);
		Class[] columnClasses = getColumnClasses(rs);
			
		ArrayList <Object[]>data = new ArrayList<Object[]>();
		Object[] row;
		
		while(rs.next())
		{
			row = new Object[columnNames.length];
			for (int i = 1; i <= row.length; i++)
			{
				row[i-1] = rs.getObject(i);
			}	
			data.add(row);
		}	
		
		ResultsTableModel resultsTableModel = new ResultsTableModel(columnNames, columnClasses, data);
		
		
		JTable table = new JTable(resultsTableModel);
		table.setTransferHandler(new ResultsTableTransferHandler());
		table.setAutoCreateRowSorter(true);
		table.setColumnSelectionAllowed(true);
		table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);		
		
		table.setComponentPopupMenu(new ResultTablePopup());
		for (Class clas : columnClasses)
			table.setDefaultRenderer(clas, new ZebraTableRenderer());		
		
		JPanel resultsPanel = new JPanel();
		resultsPanel.setLayout(new BoxLayout(resultsPanel, BoxLayout.PAGE_AXIS));
		JLabel label = new JLabel("Rows: "+data.size());
		JScrollPane jScrollPane = new JScrollPane(table);
		resultsPanel.add(label);
		resultsPanel.add(jScrollPane);		
		label.setAlignmentX(Component.LEFT_ALIGNMENT);
		jScrollPane.setAlignmentX(Component.LEFT_ALIGNMENT);
		
		jScrollPane.setPreferredSize(new Dimension(100, 125));
		table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

		return resultsPanel;		
	}
	
	
	private String[] getColumnNames(ResultSet rs) throws SQLException
	{
		ResultSetMetaData metaData = rs.getMetaData();
		
		int numColumns = metaData.getColumnCount();
		String[] columns = new String[numColumns];
		
		for (int i=1; i<numColumns+1; i++) 
			columns[i-1]= metaData.getColumnName(i);

		return columns;			
	}
	
	private Class[] getColumnClasses(ResultSet rs) throws SQLException
	{
		ResultSetMetaData metaData = rs.getMetaData();
		
		int numColumns = metaData.getColumnCount();
		Class[] classes = new Class[numColumns];
		for (int i=1; i<numColumns+1; i++) 
		{
			try
			{
				classes[i-1]= Class.forName(metaData.getColumnClassName(i));
			}
			catch (ClassNotFoundException ex)
			{
				continue;
			}
		}
	
		return classes;
	}
	
	public void cancelQuery()
	{
		messagePanel.addMessage("Attempting to cancel query");
		try
		{
			if(stmt != null && !stmt.isClosed())
				stmt.cancel();
		}
		catch (SQLException ex)
		{
			messagePanel.addMessage(ex.getMessage());
		}
	}
	
	
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        scrlResults = new javax.swing.JScrollPane();
        pnlResults = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jSplitPane1.setDividerLocation(475);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        scrlResults.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        pnlResults.setAlignmentX(0.0F);
        pnlResults.setLayout(new javax.swing.BoxLayout(pnlResults, javax.swing.BoxLayout.PAGE_AXIS));
        scrlResults.setViewportView(pnlResults);

        jSplitPane1.setTopComponent(scrlResults);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel pnlResults;
    private javax.swing.JScrollPane scrlResults;
    // End of variables declaration//GEN-END:variables

	private class QueryExecutor extends SwingWorker<List<Component>, List<Component>>
	{
		String sql;

		public QueryExecutor(String sql)
		{
			this.sql = sql;
		}

		@Override
		protected List<Component> doInBackground() throws Exception
		{

			List<Component> results = new ArrayList<Component>();

			Connection conn = null;
			stmt = null;
			ResultSet rs = null;
			String message = "Query Finished Successfully";

			try
			{
				conn = ds.getConnection();


				String[] statements = sql.split("(?im)^\\s*GO\\s*$");
				for (String sql : statements)
				{
					stmt = conn.prepareStatement(sql);
					stmt.setFetchSize(500);
					stmt.execute();

					do
					{
						rs = stmt.getResultSet();
						if (rs == null)
							continue;

						results.add(getResultsTable(rs));

					}
					while (!((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1)));

					SQLUtils.close(stmt);
					SQLUtils.close(rs);
				}
			}
			catch (Exception e)
			{
				StringWriter sw = new StringWriter();
				PrintWriter pw = new PrintWriter(sw);
				e.printStackTrace(pw);
				sw.toString();
				message = e.getMessage() + "\n" + sw.toString();
			}
			finally
			{
				SQLUtils.close(conn, stmt, rs);
			}

			messagePanel.addMessage(message);

			return results;

		}

		@Override
		protected void done()
		{
			try
			{
				List<Component> results = get();
				for (Component component : results)
					pnlResults.add(component);


				pnlResults.revalidate();

			}
			catch (Exception ex)
			{
				Logger.getLogger(ResultsPanel.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}
}
